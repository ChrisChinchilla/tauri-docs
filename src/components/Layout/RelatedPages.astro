---
import RelatedPagesNode from './RelatedPagesNode.astro'
import Dropdown from '@src/components/Dropdown.astro'
import { t } from 'astro-i18n'
import type { CollectionEntry, getCollection } from 'astro:content'

interface Props<C extends Parameters<typeof getCollection>[0]> {
  entries: CollectionEntry<C>[]
  baseUrl?: string
  dropdown?: boolean
}

let { entries, baseUrl, dropdown } = Astro.props

// Turn entries into tree
// Sort entries
// Pass to related pages node somehow

let result: any[] = []
let level = { result }

entries.forEach((entry: CollectionEntry<'docs'>) => {
  entry.slug.split('/').reduce((r, name) => {
    if (!r[name]) {
      r[name] = { result: [] }
      r.result.push({ ...entry, children: r[name].result })
    }

    return r[name]
  }, level)
})

// entries = entries.sort(function (
//   a: CollectionEntry<'docs'>,
//   b: CollectionEntry<'docs'>
// ) {
//   if (a.data.title) {
//     return a.data.title.localeCompare(b.data.title || b.slug)
//   }
//   return a.slug.localeCompare(b.data.title || b.slug)
// })

// if children, then render self again
---

{
  dropdown && (
    <Dropdown btnClass="btn-compact">
      <Fragment slot="toggle">{t('layout.related-pages')}</Fragment>
      <div
        slot="content"
        class="py-2 px-4 max-h-[calc(100svh-(var(--nav-height)+32px))] overflow-y-auto"
      >
        <ul>
          {result.map((entry) => (
            <RelatedPagesNode entry={entry} baseUrl={baseUrl} />
          ))}
        </ul>
      </div>
    </Dropdown>
  )
}
{
  !dropdown && (
    <ul>
      <li class="small-caps">{t('layout.related-pages')}</li>
      {/* @ts-ignore */}
      {result.map((entry) => (
        <RelatedPagesNode entry={entry} baseUrl={baseUrl} />
      ))}
    </ul>
  )
}
