---
import RelatedPagesNode from './RelatedPagesNode.astro'
import Dropdown from '@src/components/Dropdown.astro'
import { t } from 'astro-i18n'
import type { CollectionEntry, getCollection } from 'astro:content'

interface Props<C extends Parameters<typeof getCollection>[0]> {
  entries: CollectionEntry<C>[]
  baseUrl?: string
  dropdown?: boolean
}

let { entries, baseUrl, dropdown } = Astro.props

// Turn entries into tree
// Sort entries
// Pass to related pages node somehow

let tree: any[] = []
let initialValue: { [key: string]: any } = { tree }

entries.forEach((entry: CollectionEntry<'docs'>) => {
  entry.slug.split('/').reduce((acc, value) => {
    if (!acc[value]) {
      acc[value] = { tree: [] }
      acc.tree.push({ ...entry, children: acc[value].tree })
      // acc.tree.sort(function (
      //   a: CollectionEntry<'docs'>,
      //   b: CollectionEntry<'docs'>
      // ) {
      //   // Sort by position
      //   if (a.data.position) {
      //     return a.data.position - (b.data.position || 100)
      //   }
      //   // Sort by title
      //   if (a.data.title) {
      //     return a.data.title.localeCompare(b.data.title || b.slug)
      //   }
      //   // Sort by slug
      //   return a.slug.localeCompare(b.data.title || b.slug)
      // })
    }

    return acc[value]
  }, initialValue)
})

tree.sort(function (a: CollectionEntry<'docs'>, b: CollectionEntry<'docs'>) {
  // Sort by position
  if (a.data.position) {
    return a.data.position - (b.data.position || 100)
  }
  // Sort by title
  if (a.data.title) {
    return a.data.title.localeCompare(b.data.title || b.slug)
  }
  // Sort by slug
  return a.slug.localeCompare(b.data.title || b.slug)
})
---

{
  dropdown && (
    <Dropdown btnClass="btn-compact">
      <Fragment slot="toggle">{t('layout.related-pages')}</Fragment>
      <div
        slot="content"
        class="py-2 px-4 max-h-[calc(100svh-(var(--nav-height)+32px))] overflow-y-auto"
      >
        <ul>
          {tree.map((entry) => (
            <RelatedPagesNode entry={entry} baseUrl={baseUrl} />
          ))}
        </ul>
      </div>
    </Dropdown>
  )
}
{
  !dropdown && (
    <ul>
      <li class="small-caps">{t('layout.related-pages')}</li>
      {/* @ts-ignore */}
      {tree.map((entry) => (
        <RelatedPagesNode entry={entry} baseUrl={baseUrl} />
      ))}
    </ul>
  )
}
